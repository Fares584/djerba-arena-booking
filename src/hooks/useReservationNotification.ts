
import { useMutation } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Terrain } from '@/lib/supabase';
import { toast } from 'sonner';

interface ReservationNotificationData {
  reservation: {
    id: number;
    nom_client: string;
    tel: string;
    email: string;
    terrain_id: number;
    date: string;
    heure: string;
    duree: number;
    statut: string;
  };
  terrain: Terrain;
}

export const useReservationNotification = () => {
  return useMutation({
    mutationFn: async ({ reservation, terrain }: ReservationNotificationData) => {
      console.log('üìß Envoi de notification email pour r√©servation:', reservation.id);
      console.log('üìß Donn√©es √† envoyer:', { reservation, terrain });
      
      // Envoyer l'email de notification
      const { data: emailData, error: emailError } = await supabase.functions.invoke('send-reservation-notification', {
        body: {
          reservation,
          terrain: {
            nom: terrain.nom,
            type: terrain.type
          }
        }
      });

      if (emailError) {
        console.error('‚ùå Erreur lors de l\'envoi de la notification email:', emailError);
      } else {
        console.log('‚úÖ Email de notification envoy√© avec succ√®s:', emailData);
      }

      // Envoyer la notification push
      const dateFormatted = new Date(reservation.date).toLocaleDateString('fr-FR', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      const { data: pushData, error: pushError } = await supabase.functions.invoke('send-push-notification', {
        body: {
          title: 'üèüÔ∏è Nouvelle R√©servation',
          body: `${reservation.nom_client} - ${terrain.nom} le ${dateFormatted} √† ${reservation.heure}`,
          url: '/admin/reservations'
        }
      });

      if (pushError) {
        console.error('‚ùå Erreur lors de l\'envoi de la notification push:', pushError);
      } else {
        console.log('‚úÖ Notification push envoy√©e avec succ√®s:', pushData);
      }

      // On retourne le succ√®s m√™me si une des notifications √©choue
      return { emailData, pushData };
    },
    onSuccess: (data) => {
      console.log('‚úÖ Hook: Notifications envoy√©es avec succ√®s');
      // Suppression du toast de succ√®s - l'utilisateur n'a pas besoin de savoir si l'email/push a √©t√© envoy√©
    },
    onError: (error) => {
      console.error('‚ùå √âchec de l\'envoi des notifications:', error);
      // Suppression du toast d'erreur aussi - pas n√©cessaire d'informer l'utilisateur des probl√®mes de notification
      // On ne fait pas √©chouer la cr√©ation de r√©servation si les notifications √©chouent
    }
  });
};
