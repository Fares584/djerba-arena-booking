
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useDeviceFingerprint } from './useDeviceFingerprint';
import { normalizeTunisianPhone } from '@/lib/validation';

interface SecurityCheckResult {
  canReserve: boolean;
  reason?: string;
}

export function useReservationSecurity() {
  const { getDeviceFingerprint } = useDeviceFingerprint();

  const checkReservationLimits = async (
    phone: string, 
    email: string,
    isAdminCreation: boolean = false
  ): Promise<SecurityCheckResult> => {
    try {
      console.log('üîê === D√âBUT V√âRIFICATION S√âCURIT√â COMPL√àTE ===');
      console.log('üìû T√©l√©phone brut re√ßu:', phone);
      console.log('üìß Email √† v√©rifier:', email);
      console.log('üë§ Mode admin:', isAdminCreation);
      
      // Normaliser le t√©l√©phone vers 8 chiffres
      const normalizedPhone = normalizeTunisianPhone(phone);
      const cleanEmail = email.trim().toLowerCase();
      
      console.log('üìû T√©l√©phone normalis√© (8 chiffres):', normalizedPhone);
      console.log('üìß Email nettoy√©:', cleanEmail);

      // ==================== V√âRIFICATION BLACKLIST OBLIGATOIRE ====================
      console.log('üö´ 1. V√âRIFICATION BLACKLIST (TOUJOURS ACTIVE)');
      
      // V√©rifier t√©l√©phone dans blacklist avec le num√©ro normalis√©
      console.log('üîç Recherche t√©l√©phone normalis√© dans blacklist...');
      const { data: phoneBlacklistData, error: phoneBlacklistError } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'phone')
        .eq('value', normalizedPhone);

      if (phoneBlacklistError) {
        console.error('‚ùå Erreur v√©rification t√©l√©phone blacklist:', phoneBlacklistError);
        throw new Error('Erreur de v√©rification de s√©curit√©');
      }

      console.log('üìã R√©sultat recherche t√©l√©phone normalis√©:', phoneBlacklistData);

      if (phoneBlacklistData && phoneBlacklistData.length > 0) {
        console.log('üö´ T√âL√âPHONE BLOQU√â D√âTECT√â:', phoneBlacklistData[0]);
        console.log('‚ùå === R√âSERVATION REFUS√âE - T√âL√âPHONE BLACKLIST√â ===');
        return {
          canReserve: false,
          reason: `Ce num√©ro de t√©l√©phone (${phone}) est bloqu√© d√©finitivement. Contactez l'administration.`
        };
      }

      // V√©rifier email dans blacklist
      console.log('üîç Recherche email dans blacklist...');
      const { data: emailBlacklistData, error: emailBlacklistError } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'email')
        .eq('value', cleanEmail);

      if (emailBlacklistError) {
        console.error('‚ùå Erreur v√©rification email blacklist:', emailBlacklistError);
        throw new Error('Erreur de v√©rification de s√©curit√©');
      }

      console.log('üìã R√©sultat recherche email:', emailBlacklistData);

      if (emailBlacklistData && emailBlacklistData.length > 0) {
        console.log('üö´ EMAIL BLOQU√â D√âTECT√â:', emailBlacklistData[0]);
        console.log('‚ùå === R√âSERVATION REFUS√âE - EMAIL BLACKLIST√â ===');
        return {
          canReserve: false,
          reason: `Cette adresse email (${cleanEmail}) est bloqu√©e d√©finitivement. Contactez l'administration.`
        };
      }

      console.log('‚úÖ Contact non pr√©sent dans la blacklist');

      // ==================== AUTRES V√âRIFICATIONS (CONTOURNABLES SI ADMIN) ====================
      if (isAdminCreation) {
        console.log('üë§ MODE ADMIN - Autres v√©rifications contourn√©es');
        console.log('‚úÖ === AUTORISATION ADMIN ACCORD√âE ===');
        return { canReserve: true };
      }

      console.log('üîÑ 2. V√©rifications suppl√©mentaires...');
      
      const deviceFingerprint = getDeviceFingerprint();
      const today = new Date().toISOString().split('T')[0];
      const todayStart = `${today}T00:00:00.000Z`;
      const todayEnd = `${today}T23:59:59.999Z`;

      // V√©rification limites quotidiennes par contact - utiliser le t√©l√©phone normalis√©
      const { data: contactReservations, error: contactError } = await supabase
        .from('reservations')
        .select('id, created_at, tel, email, nom_client')
        .eq('tel', normalizedPhone)
        .eq('email', cleanEmail)
        .gte('created_at', todayStart)
        .lte('created_at', todayEnd);

      if (contactError) {
        console.error('Erreur v√©rification contact:', contactError);
      }

      const contactCount = contactReservations?.length || 0;
      console.log(`üìä R√©servations par ce contact aujourd'hui: ${contactCount}/2`);

      if (contactCount >= 2) {
        console.log('‚ùå Limite quotidienne par contact atteinte');
        return {
          canReserve: false,
          reason: `Limite quotidienne atteinte : maximum 2 r√©servations par personne par jour. Vous avez d√©j√† fait ${contactCount} r√©servation(s) aujourd'hui.`
        };
      }

      // V√©rification limites par appareil
      const { data: deviceReservations, error: deviceError } = await supabase
        .from('reservations')
        .select('id, created_at, ip_address')
        .eq('ip_address', deviceFingerprint)
        .gte('created_at', todayStart)
        .lte('created_at', todayEnd);

      if (deviceError) {
        console.error('Erreur v√©rification appareil:', deviceError);
      }

      const deviceCount = deviceReservations?.length || 0;
      console.log(`üìä R√©servations par cet appareil aujourd'hui: ${deviceCount}/2`);

      if (deviceCount >= 2) {
        console.log('‚ùå Limite quotidienne par appareil atteinte');
        return {
          canReserve: false,
          reason: `Limite quotidienne atteinte : maximum 2 r√©servations par appareil par jour. Cet appareil a d√©j√† fait ${deviceCount} r√©servation(s) aujourd'hui.`
        };
      }

      // V√©rifications temporelles - utiliser le t√©l√©phone normalis√©
      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
      const { data: recentContactReservations } = await supabase
        .from('reservations')
        .select('created_at')
        .eq('tel', normalizedPhone)
        .eq('email', cleanEmail)
        .gte('created_at', fiveMinutesAgo)
        .order('created_at', { ascending: false })
        .limit(1);

      if (recentContactReservations && recentContactReservations.length > 0) {
        const timeDiff = new Date().getTime() - new Date(recentContactReservations[0].created_at).getTime();
        const minutesLeft = Math.ceil((5 * 60 * 1000 - timeDiff) / (60 * 1000));
        
        return {
          canReserve: false,
          reason: `Veuillez attendre ${minutesLeft} minute(s) avant de faire une nouvelle r√©servation.`
        };
      }

      const twoMinutesAgo = new Date(Date.now() - 2 * 60 * 1000).toISOString();
      const { data: recentDeviceReservations } = await supabase
        .from('reservations')
        .select('created_at')
        .eq('ip_address', deviceFingerprint)
        .gte('created_at', twoMinutesAgo)
        .order('created_at', { ascending: false })
        .limit(1);

      if (recentDeviceReservations && recentDeviceReservations.length > 0) {
        const timeDiff = new Date().getTime() - new Date(recentDeviceReservations[0].created_at).getTime();
        const minutesLeft = Math.ceil((2 * 60 * 1000 - timeDiff) / (60 * 1000));
        
        return {
          canReserve: false,
          reason: `Cet appareil doit attendre ${minutesLeft} minute(s) avant de faire une nouvelle r√©servation.`
        };
      }

      console.log('‚úÖ === TOUTES LES V√âRIFICATIONS PASS√âES ===');
      return { canReserve: true };
      
    } catch (error) {
      console.error('‚ùå ERREUR CRITIQUE dans checkReservationLimits:', error);
      return {
        canReserve: false,
        reason: 'Erreur de v√©rification de s√©curit√©. Veuillez r√©essayer.'
      };
    }
  };

  return { checkReservationLimits };
}
