
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useDeviceFingerprint } from './useDeviceFingerprint';

interface SecurityCheckResult {
  canReserve: boolean;
  reason?: string;
}

export function useReservationSecurity() {
  const { getDeviceFingerprint } = useDeviceFingerprint();

  // Fonction pour normaliser les num√©ros de t√©l√©phone
  const normalizePhoneNumber = (phone: string): string => {
    // Supprimer tous les espaces, tirets, points, parenth√®ses
    let cleaned = phone.replace(/[\s\-\.\(\)]/g, '');
    
    // Convertir +216 ou 216 en format local (8 chiffres)
    if (cleaned.startsWith('+216')) {
      cleaned = cleaned.substring(4);
    } else if (cleaned.startsWith('216')) {
      cleaned = cleaned.substring(3);
    }
    
    // S'assurer qu'on a bien 8 chiffres pour la Tunisie
    if (cleaned.length === 8 && /^\d{8}$/.test(cleaned)) {
      return cleaned;
    }
    
    // Retourner le num√©ro original si pas de format reconnu
    return phone.trim();
  };

  const checkReservationLimits = async (
    phone: string, 
    email: string,
    isAdminCreation: boolean = false
  ): Promise<SecurityCheckResult> => {
    try {
      console.log('=== D√âBUT V√âRIFICATION S√âCURIT√â RENFORC√âE ===');
      console.log('V√©rification de s√©curit√© pour:', { phone, email, isAdminCreation });
      
      // Si c'est une cr√©ation admin, contourner TOUTES les v√©rifications
      if (isAdminCreation) {
        console.log('‚úÖ ADMIN CR√âATION - Toutes les v√©rifications de s√©curit√© contourn√©es');
        return { canReserve: true };
      }

      // Normaliser les donn√©es d'entr√©e
      const normalizedPhone = normalizePhoneNumber(phone);
      const normalizedEmail = email.trim().toLowerCase();
      
      console.log('Donn√©es normalis√©es:', {
        originalPhone: phone,
        normalizedPhone: normalizedPhone,
        originalEmail: email,
        normalizedEmail: normalizedEmail
      });

      // Obtenir le fingerprint de l'appareil
      const deviceFingerprint = getDeviceFingerprint();
      console.log('Fingerprint de l\'appareil:', deviceFingerprint);

      // 1. V√©rifier la blacklist - VERSION ULTRA ROBUSTE AVEC DEBUG
      console.log('1. V√©rification de la blacklist...');
      
      // NOUVEAU: R√©cup√©rer TOUTE la blacklist pour debug
      console.log('üîç DEBUG: R√©cup√©ration de toute la blacklist...');
      const { data: allBlacklist, error: allBlacklistError } = await supabase
        .from('blacklist')
        .select('*');
      
      if (allBlacklistError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de toute la blacklist:', allBlacklistError);
      } else {
        console.log('üìã TOUTE LA BLACKLIST:', allBlacklist);
        console.log('üìã Nombre d\'entr√©es dans la blacklist:', allBlacklist?.length || 0);
      }
      
      // V√©rifier le t√©l√©phone dans la blacklist avec PLUSIEURS FORMATS
      console.log('V√©rification t√©l√©phone blacklist avec:', normalizedPhone);
      
      // Test avec le num√©ro normalis√©
      const { data: phoneBlacklist1, error: phoneError1 } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'phone')
        .eq('value', normalizedPhone);

      // Test avec le num√©ro original
      const { data: phoneBlacklist2, error: phoneError2 } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'phone')
        .eq('value', phone);

      // Test avec ILIKE pour voir s'il y a des diff√©rences de casse ou espaces
      const { data: phoneBlacklist3, error: phoneError3 } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'phone')
        .ilike('value', `%${normalizedPhone}%`);

      console.log('üìû Tests t√©l√©phone blacklist:');
      console.log('  - Avec num√©ro normalis√© (' + normalizedPhone + '):', phoneBlacklist1);
      console.log('  - Avec num√©ro original (' + phone + '):', phoneBlacklist2);
      console.log('  - Avec ILIKE pattern (' + normalizedPhone + '):', phoneBlacklist3);

      if (phoneError1 || phoneError2 || phoneError3) {
        console.error('Erreur lors de la v√©rification t√©l√©phone blacklist:', { phoneError1, phoneError2, phoneError3 });
        return {
          canReserve: false,
          reason: 'Erreur de v√©rification de s√©curit√©. Veuillez r√©essayer.'
        };
      }

      // V√©rifier si le t√©l√©phone est bloqu√© avec n'importe lequel des formats
      const isPhoneBlocked = (phoneBlacklist1 && phoneBlacklist1.length > 0) || 
                            (phoneBlacklist2 && phoneBlacklist2.length > 0) || 
                            (phoneBlacklist3 && phoneBlacklist3.length > 0);

      if (isPhoneBlocked) {
        console.log('‚ùå T√©l√©phone trouv√© dans la blacklist');
        return {
          canReserve: false,
          reason: 'Ce contact est bloqu√©. Contactez l\'administration.'
        };
      } else {
        console.log('‚úÖ T√©l√©phone NON trouv√© dans la blacklist');
      }

      // V√©rifier l'email dans la blacklist avec PLUSIEURS FORMATS
      console.log('V√©rification email blacklist avec:', normalizedEmail);
      
      // Test avec email normalis√©
      const { data: emailBlacklist1, error: emailError1 } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'email')
        .eq('value', normalizedEmail);

      // Test avec email original
      const { data: emailBlacklist2, error: emailError2 } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'email')
        .eq('value', email);

      // Test avec ILIKE
      const { data: emailBlacklist3, error: emailError3 } = await supabase
        .from('blacklist')
        .select('*')
        .eq('type', 'email')
        .ilike('value', `%${normalizedEmail}%`);

      console.log('üìß Tests email blacklist:');
      console.log('  - Avec email normalis√© (' + normalizedEmail + '):', emailBlacklist1);
      console.log('  - Avec email original (' + email + '):', emailBlacklist2);
      console.log('  - Avec ILIKE pattern (' + normalizedEmail + '):', emailBlacklist3);

      if (emailError1 || emailError2 || emailError3) {
        console.error('Erreur lors de la v√©rification email blacklist:', { emailError1, emailError2, emailError3 });
        return {
          canReserve: false,
          reason: 'Erreur de v√©rification de s√©curit√©. Veuillez r√©essayer.'
        };
      }

      // V√©rifier si l'email est bloqu√© avec n'importe lequel des formats
      const isEmailBlocked = (emailBlacklist1 && emailBlacklist1.length > 0) || 
                             (emailBlacklist2 && emailBlacklist2.length > 0) || 
                             (emailBlacklist3 && emailBlacklist3.length > 0);

      if (isEmailBlocked) {
        console.log('‚ùå Email trouv√© dans la blacklist');
        return {
          canReserve: false,
          reason: 'Ce contact est bloqu√©. Contactez l\'administration.'
        };
      } else {
        console.log('‚úÖ Email NON trouv√© dans la blacklist');
      }

      console.log('‚úÖ Contact non pr√©sent dans la blacklist');

      // 2. V√©rification des limites par contact (email + t√©l√©phone)
      console.log('2. V√©rification des limites par contact...');
      const today = new Date().toISOString().split('T')[0];
      const todayStart = `${today}T00:00:00.000Z`;
      const todayEnd = `${today}T23:59:59.999Z`;

      const { data: contactReservations, error: contactError } = await supabase
        .from('reservations')
        .select('id, created_at, tel, email, nom_client, ip_address')
        .eq('tel', phone)
        .eq('email', email)
        .gte('created_at', todayStart)
        .lte('created_at', todayEnd);

      if (contactError) {
        console.error('Erreur lors de la v√©rification par contact:', contactError);
      }

      const contactReservationsCount = contactReservations?.length || 0;
      console.log(`R√©servations par ce contact aujourd'hui: ${contactReservationsCount}/2`);

      if (contactReservationsCount >= 2) {
        console.log('‚ùå BLOQU√â - Limite quotidienne par contact atteinte:', {
          contactReservationsCount,
          phone,
          email: email.slice(0, 5) + '...'
        });
        
        return {
          canReserve: false,
          reason: `Limite quotidienne atteinte : maximum 2 r√©servations par personne par jour. Vous avez d√©j√† fait ${contactReservationsCount} r√©servation(s) aujourd'hui.`
        };
      }

      // 3. V√©rification des limites par appareil (fingerprint)
      console.log('3. V√©rification des limites par appareil...');
      const { data: deviceReservations, error: deviceError } = await supabase
        .from('reservations')
        .select('id, created_at, tel, email, nom_client, ip_address')
        .eq('ip_address', deviceFingerprint)
        .gte('created_at', todayStart)
        .lte('created_at', todayEnd);

      if (deviceError) {
        console.error('Erreur lors de la v√©rification par appareil:', deviceError);
      }

      const deviceReservationsCount = deviceReservations?.length || 0;
      console.log(`R√©servations par cet appareil aujourd'hui: ${deviceReservationsCount}/2`);

      if (deviceReservationsCount >= 2) {
        console.log('‚ùå BLOQU√â - Limite quotidienne par appareil atteinte:', {
          deviceReservationsCount,
          deviceFingerprint
        });
        
        return {
          canReserve: false,
          reason: `Limite quotidienne atteinte : maximum 2 r√©servations par appareil par jour. Cet appareil a d√©j√† fait ${deviceReservationsCount} r√©servation(s) aujourd'hui.`
        };
      }

      // 4. V√©rification temporelle par contact (5 minutes)
      console.log('4. V√©rification temporelle par contact...');
      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
      
      const { data: recentContactReservations, error: recentContactError } = await supabase
        .from('reservations')
        .select('created_at, tel, email')
        .eq('tel', phone)
        .eq('email', email)
        .gte('created_at', fiveMinutesAgo)
        .order('created_at', { ascending: false })
        .limit(1);

      if (!recentContactError && recentContactReservations && recentContactReservations.length > 0) {
        const lastReservation = recentContactReservations[0];
        const timeDiff = new Date().getTime() - new Date(lastReservation.created_at).getTime();
        const minutesLeft = Math.ceil((5 * 60 * 1000 - timeDiff) / (60 * 1000));
        
        console.log('‚ùå BLOQU√â - Limitation temporelle par contact:', {
          lastReservation: lastReservation.created_at,
          timeDiff: timeDiff / 1000 / 60,
          minutesLeft
        });
        
        return {
          canReserve: false,
          reason: `Veuillez attendre ${minutesLeft} minute(s) avant de faire une nouvelle r√©servation.`
        };
      }

      // 5. V√©rification temporelle par appareil (2 minutes)
      console.log('5. V√©rification temporelle par appareil...');
      const twoMinutesAgo = new Date(Date.now() - 2 * 60 * 1000).toISOString();
      
      const { data: recentDeviceReservations, error: recentDeviceError } = await supabase
        .from('reservations')
        .select('created_at, ip_address')
        .eq('ip_address', deviceFingerprint)
        .gte('created_at', twoMinutesAgo)
        .order('created_at', { ascending: false })
        .limit(1);

      if (!recentDeviceError && recentDeviceReservations && recentDeviceReservations.length > 0) {
        const lastDeviceReservation = recentDeviceReservations[0];
        const timeDiff = new Date().getTime() - new Date(lastDeviceReservation.created_at).getTime();
        const minutesLeft = Math.ceil((2 * 60 * 1000 - timeDiff) / (60 * 1000));
        
        console.log('‚ùå BLOQU√â - Limitation temporelle par appareil:', {
          lastReservation: lastDeviceReservation.created_at,
          timeDiff: timeDiff / 1000 / 60,
          minutesLeft
        });
        
        return {
          canReserve: false,
          reason: `Cet appareil doit attendre ${minutesLeft} minute(s) avant de faire une nouvelle r√©servation.`
        };
      }

      // 6. V√©rification anti-spam global (protection du syst√®me)
      console.log('6. V√©rification anti-spam global...');
      const { data: recentGlobalReservations, error: globalError } = await supabase
        .from('reservations')
        .select('created_at')
        .gte('created_at', fiveMinutesAgo)
        .order('created_at', { ascending: false });

      if (!globalError && recentGlobalReservations && recentGlobalReservations.length >= 15) {
        console.log('‚ùå BLOQU√â - Trop de r√©servations r√©centes globalement:', recentGlobalReservations.length);
        return {
          canReserve: false,
          reason: 'Syst√®me temporairement surcharg√©. Veuillez r√©essayer dans quelques minutes.'
        };
      }

      console.log('‚úÖ Toutes les v√©rifications de s√©curit√© sont pass√©es');
      console.log('=== FIN V√âRIFICATION S√âCURIT√â RENFORC√âE ===');
      return { canReserve: true };
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©rale lors de la v√©rification de s√©curit√©:', error);
      // En cas d'erreur, on bloque par s√©curit√©
      return {
        canReserve: false,
        reason: 'Erreur de v√©rification de s√©curit√©. Veuillez r√©essayer dans quelques minutes.'
      };
    }
  };

  return { checkReservationLimits };
}
